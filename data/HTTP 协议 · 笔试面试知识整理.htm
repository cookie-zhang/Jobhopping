<!DOCTYPE html>
<!-- saved from url=(0063)https://hit-alibaba.github.io/interview/basic/network/HTTP.html -->
<html lang=""><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        
        
        <title>HTTP 协议 · 笔试面试知识整理</title>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="description" content="">
        <meta name="generator" content="GitBook 3.2.2">
        
        
        
    
    <link rel="stylesheet" href="./HTTP 协议 · 笔试面试知识整理_files/style.css">

    
            
                
                <link rel="stylesheet" href="./HTTP 协议 · 笔试面试知识整理_files/plugin.css">
                
            
                
                <link rel="stylesheet" href="./HTTP 协议 · 笔试面试知识整理_files/website.css">
                
            
                
                <link rel="stylesheet" href="./HTTP 协议 · 笔试面试知识整理_files/search.css">
                
            
                
                <link rel="stylesheet" href="./HTTP 协议 · 笔试面试知识整理_files/website(1).css">
                
            
        

    

    
        
    
        
    
        
    
        
    
        
    
        
    

        
    
    
    <meta name="HandheldFriendly" content="true">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <link rel="apple-touch-icon-precomposed" sizes="152x152" href="https://hit-alibaba.github.io/interview/gitbook/images/apple-touch-icon-precomposed-152.png">
    <link rel="shortcut icon" href="https://hit-alibaba.github.io/interview/gitbook/images/favicon.ico" type="image/x-icon">

    
    <link rel="next" href="https://hit-alibaba.github.io/interview/basic/network/TCP.html">
    
    
    <link rel="prev" href="https://hit-alibaba.github.io/interview/basic/network/">
    

    </head>
    <body>
        
<div class="book without-animation with-summary font-size-2 font-family-1">
    <div class="book-summary">
        
            
<div id="book-search-input" role="search">
    <input type="text" placeholder="Type to search">
</div>

            
                <nav role="navigation">
                


<ul class="summary">
    
    

    

    
        
        
    
        <li class="chapter " data-level="1.1" data-path="../../">
            
                <a href="https://hit-alibaba.github.io/interview/">
            
                    
                    Introduction
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2" data-path="../">
            
                <a href="https://hit-alibaba.github.io/interview/basic/">
            
                    
                    基础知识
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.2.1" data-path="./">
            
                <a href="https://hit-alibaba.github.io/interview/basic/network/">
            
                    
                    计算机网络
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter active" data-level="1.2.1.1" data-path="HTTP.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html">
            
                    
                    HTTP 协议
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.1.2" data-path="TCP.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/network/TCP.html">
            
                    
                    TCP 协议
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.1.3" data-path="UDP.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/network/UDP.html">
            
                    
                    UDP 协议
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.1.4" data-path="IP.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/network/IP.html">
            
                    
                    IP 协议
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.1.5" data-path="Socket-Programming-Basic.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/network/Socket-Programming-Basic.html">
            
                    
                    Socket 编程
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.2.2" data-path="../algo/">
            
                <a href="https://hit-alibaba.github.io/interview/basic/algo/">
            
                    
                    数据结构与算法
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.2.2.1" data-path="../algo/Linked-List.md">
            
                <span>
            
                    
                    链表
            
                
            

            
        </span></li>
    
        <li class="chapter " data-level="1.2.2.2" data-path="../algo/Tree.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/algo/Tree.html">
            
                    
                    树
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.2.3" data-path="../algo/Hash-Table.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/algo/Hash-Table.html">
            
                    
                    哈希表
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.2.4" data-path="../algo/Sorting.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/algo/Sorting.html">
            
                    
                    排序
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.2.5">
            
                <span>
            
                    
                    搜索
            
                </span>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.2.6">
            
                <span>
            
                    
                    字符串
            
                </span>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.2.7">
            
                <span>
            
                    
                    向量/矩阵
            
                </span>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.2.8" data-path="../algo/Random.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/algo/Random.html">
            
                    
                    随机
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.2.9" data-path="../algo/Greedy.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/algo/Greedy.html">
            
                    
                    贪心
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.2.10" data-path="../algo/DP.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/algo/DP.html">
            
                    
                    动态规划
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.2.3" data-path="../arch/">
            
                <a href="https://hit-alibaba.github.io/interview/basic/arch/">
            
                    
                    体系结构与操作系统
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.2.3.1" data-path="../arch/Arch.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/arch/Arch.html">
            
                    
                    体系结构基础
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.3.2" data-path="../arch/OS.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/arch/OS.html">
            
                    
                    操作系统基础
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.3.3" data-path="../arch/Concurrency.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/arch/Concurrency.html">
            
                    
                    并发技术
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.3.4" data-path="../arch/Memory-Management.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/arch/Memory-Management.html">
            
                    
                    内存管理
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.3.5" data-path="../arch/Disk-And-File.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/arch/Disk-And-File.html">
            
                    
                    磁盘与文件
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.2.4" data-path="../db/">
            
                <a href="https://hit-alibaba.github.io/interview/basic/db/">
            
                    
                    数据库系统
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.2.4.1" data-path="../db/Transaction.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/db/Transaction.html">
            
                    
                    事务处理
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.4.2" data-path="../db/DB-Index.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/db/DB-Index.html">
            
                    
                    索引
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.2.5" data-path="../compiler/">
            
                <a href="https://hit-alibaba.github.io/interview/basic/compiler/">
            
                    
                    编译原理
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.2.5.1" data-path="../compiler/Compiler-Arch.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/compiler/Compiler-Arch.html">
            
                    
                    编译器架构
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.2.6" data-path="../design/">
            
                <a href="https://hit-alibaba.github.io/interview/basic/design/">
            
                    
                    设计模式
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.2.6.1" data-path="../design/OO-Basic.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/design/OO-Basic.html">
            
                    
                    面向对象基础
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.6.2" data-path="../design/GOP.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/design/GOP.html">
            
                    
                    四人帮设计模式
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.6.3" data-path="../design/MVC.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/design/MVC.html">
            
                    
                    MVC 与 MVVM
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.2.7" data-path="../scm/">
            
                <a href="https://hit-alibaba.github.io/interview/basic/scm/">
            
                    
                    版本控制
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.2.7.1" data-path="../scm/Git.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/scm/Git.html">
            
                    
                    Git
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.7.2" data-path="../scm/SVN.html">
            
                <a href="https://hit-alibaba.github.io/interview/basic/scm/SVN.html">
            
                    
                    SVN
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.3" data-path="../../iOS/">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/">
            
                    
                    iOS 开发
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.3.1" data-path="../../iOS/ObjC-Basic/">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/ObjC-Basic/">
            
                    
                    Objective-C 语言基础
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.3.1.1" data-path="../../iOS/ObjC-Basic/Class.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/ObjC-Basic/Class.html">
            
                    
                    类与对象
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.1.2" data-path="../../iOS/ObjC-Basic/Block.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/ObjC-Basic/Block.html">
            
                    
                    Block 编程
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.1.3" data-path="../../iOS/ObjC-Basic/Runtime.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/ObjC-Basic/Runtime.html">
            
                    
                    Objective-C Runtime
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.1.4" data-path="../../iOS/ObjC-Basic/MM.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/ObjC-Basic/MM.html">
            
                    
                    Objective-C 内存管理
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.1.5" data-path="../../iOS/ObjC-Basic/Runloop.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/ObjC-Basic/Runloop.html">
            
                    
                    Runloop
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.3.2" data-path="../../iOS/Cocoa-Touch/">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/">
            
                    
                    Cocoa Touch
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.3.2.1" data-path="../../iOS/Cocoa-Touch/Event-Handling.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/Event-Handling.html">
            
                    
                    事件处理
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.2.2" data-path="../../iOS/Cocoa-Touch/UIApplication.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/UIApplication.html">
            
                    
                    UIApplication
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.2.3" data-path="../../iOS/Cocoa-Touch/UIView-Basic.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/UIView-Basic.html">
            
                    
                    UIView
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.2.4" data-path="../../iOS/Cocoa-Touch/UIViewController.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/UIViewController.html">
            
                    
                    UIViewController
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.2.5" data-path="../../iOS/Cocoa-Touch/Animation.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/Animation.html">
            
                    
                    动画
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.2.6" data-path="../../iOS/Cocoa-Touch/Network.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/Network.html">
            
                    
                    网络编程
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.2.7" data-path="../../iOS/Cocoa-Touch/Multithreading.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/Multithreading.html">
            
                    
                    并发编程
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.2.8" data-path="../../iOS/Cocoa-Touch/File-System.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/File-System.html">
            
                    
                    文件系统
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.2.9" data-path="../../iOS/Cocoa-Touch/Design.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/Design.html">
            
                    
                    设计模式
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.2.10" data-path="../../iOS/Cocoa-Touch/Performance.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/Performance.html">
            
                    
                    性能
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.3.3" data-path="../../iOS/Swift/">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Swift/">
            
                    
                    Swift
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.3.3.1" data-path="../../iOS/Swift/Class.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Swift/Class.html">
            
                    
                    类与对象
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.3.2" data-path="../../iOS/Swift/Struct-And-Enum.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Swift/Struct-And-Enum.html">
            
                    
                    结构体与枚举
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.3.3" data-path="../../iOS/Swift/Function-And-Closure.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Swift/Function-And-Closure.html">
            
                    
                    函数与闭包
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.3.4" data-path="../../iOS/Questions.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/Questions.html">
            
                    
                    面试问题
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.5" data-path="../../iOS/More.html">
            
                <a href="https://hit-alibaba.github.io/interview/iOS/More.html">
            
                    
                    更多资料
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.4" data-path="../../Android/">
            
                <a href="https://hit-alibaba.github.io/interview/Android/">
            
                    
                    Android 开发
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.4.1" data-path="../../Android/Java/">
            
                <a href="https://hit-alibaba.github.io/interview/Android/Java/">
            
                    
                    Java 基础
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.4.1.1" data-path="../../Android/Java/Questions.html">
            
                <a href="https://hit-alibaba.github.io/interview/Android/Java/Questions.html">
            
                    
                    面试问题
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.4.2" data-path="../../Android/basic/">
            
                <a href="https://hit-alibaba.github.io/interview/Android/basic/">
            
                    
                    Android 基础
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.4.2.1" data-path="../../Android/basic/Android-Arch.html">
            
                <a href="https://hit-alibaba.github.io/interview/Android/basic/Android-Arch.html">
            
                    
                    Android 系统架构
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.4.2.2" data-path="../../Android/basic/Activity-Service-Lifecircle.html">
            
                <a href="https://hit-alibaba.github.io/interview/Android/basic/Activity-Service-Lifecircle.html">
            
                    
                    Activity/Service 生命周期
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.4.2.3" data-path="../../Android/basic/Android-Animation.html">
            
                <a href="https://hit-alibaba.github.io/interview/Android/basic/Android-Animation.html">
            
                    
                    Android 中的动画(补帧与逐帧)
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.4.2.4" data-path="../../Android/basic/Android-LaunchMode.html">
            
                <a href="https://hit-alibaba.github.io/interview/Android/basic/Android-LaunchMode.html">
            
                    
                    Activity 的 4 种启动模式
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.4.2.5" data-path="../../Android/basic/ListView-Optimize.html">
            
                <a href="https://hit-alibaba.github.io/interview/Android/basic/ListView-Optimize.html">
            
                    
                    ListView原理与优化
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.4.2.6" data-path="../../Android/basic/Android-handler-thread-looper.html">
            
                <a href="https://hit-alibaba.github.io/interview/Android/basic/Android-handler-thread-looper.html">
            
                    
                    Android 中的 Thread, Looper 和 Handler 机制
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.4.3" data-path="../../Android/Questions.html">
            
                <a href="https://hit-alibaba.github.io/interview/Android/Questions.html">
            
                    
                    面试问题
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    

    

    <li class="divider"></li>

    <li>
        <a href="https://www.gitbook.com/" target="blank" class="gitbook-link">
            Published with GitBook
        </a>
    </li>
</ul>


                </nav>
            
        
    </div>

    <div class="book-body">
        
            <div class="body-inner">
                
                    

<div class="book-header" role="navigation">
    

    <!-- Title -->
    <a class="btn pull-left js-toolbar-action" aria-label="" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#"><i class="fa fa-align-justify"></i></a><div class="dropdown pull-right js-toolbar-action"><a class="btn toggle-dropdown" aria-label="Share" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#"><i class="fa fa-share-alt"></i></a><div class="dropdown-menu dropdown-left"><div class="dropdown-caret"><span class="caret-outer"></span><span class="caret-inner"></span></div><div class="buttons"><button class="button size-5 ">Facebook</button><button class="button size-5 ">Google+</button><button class="button size-5 ">Twitter</button><button class="button size-5 ">Weibo</button><button class="button size-5 ">Instapaper</button></div></div></div><a class="btn pull-right js-toolbar-action" aria-label="" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#"><i class="fa fa-facebook"></i></a><a class="btn pull-right js-toolbar-action" aria-label="" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#"><i class="fa fa-twitter"></i></a><div class="dropdown pull-left font-settings js-toolbar-action"><a class="btn toggle-dropdown" aria-label="Font Settings" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#"><i class="fa fa-font"></i></a><div class="dropdown-menu dropdown-right"><div class="dropdown-caret"><span class="caret-outer"></span><span class="caret-inner"></span></div><div class="buttons"><button class="button size-2 font-reduce">A</button><button class="button size-2 font-enlarge">A</button></div><div class="buttons"><button class="button size-2 ">Serif</button><button class="button size-2 ">Sans</button></div><div class="buttons"><button class="button size-3 ">White</button><button class="button size-3 ">Sepia</button><button class="button size-3 ">Night</button></div></div></div><h1>
        <i class="fa fa-circle-o-notch fa-spin"></i>
        <a href="https://hit-alibaba.github.io/interview/">HTTP 协议</a>
    </h1>
</div>




                    <div class="page-wrapper" tabindex="-1" role="main">
                        <div class="page-inner">
                            
<div id="book-search-results">
    <div class="search-noresults">
    
                                <section class="normal markdown-section">
                                
                                <h2 id="http的特性"><a name="http的特性" class="plugin-anchor" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#http的特性"><i class="fa fa-link" aria-hidden="true"></i></a>HTTP的特性</h2>
<ul>
<li>HTTP构建于TCP/IP协议之上，默认端口号是80</li>
<li>HTTP是<strong>无连接无状态</strong>的</li>
</ul>
<h2 id="http报文"><a name="http报文" class="plugin-anchor" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#http报文"><i class="fa fa-link" aria-hidden="true"></i></a>HTTP报文</h2>
<h3 id="请求报文"><a name="请求报文" class="plugin-anchor" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#请求报文"><i class="fa fa-link" aria-hidden="true"></i></a>请求报文</h3>
<p>HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>
<pre><code>&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;
&lt;headers&gt;

&lt;entity-body&gt;
</code></pre><p>HTTP定义了与服务器交互的不同方法，最基本的方法有4种，分别是<code>GET</code>，<code>POST</code>，<code>PUT</code>，<code>DELETE</code>。<code>URL</code>全称是资源描述符，我们可以这样认为：一个<code>URL</code>地址，它用于描述一个网络上的资源，而 HTTP 中的<code>GET</code>，<code>POST</code>，<code>PUT</code>，<code>DELETE</code>就对应着对这个资源的查，增，改，删4个操作。</p>
<ol>
<li><p>GET用于信息获取，而且应该是安全的 和 幂等的。</p>
<p> 所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p>
<p> 幂等的意味着对同一URL的多个请求应该返回同样的结果。</p>
<p> GET请求报文示例：</p>
<pre><code> GET /books/?sex=man&amp;name=Professional HTTP/1.1
 Host: www.example.com
 User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)
 Gecko/20050225 Firefox/1.0.1
 Connection: Keep-Alive
</code></pre></li>
<li><p>POST表示可能修改变服务器上的资源的请求。</p>
<pre><code> POST / HTTP/1.1
 Host: www.example.com
 User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)
 Gecko/20050225 Firefox/1.0.1
 Content-Type: application/x-www-form-urlencoded
 Content-Length: 40
 Connection: Keep-Alive

 sex=man&amp;name=Professional  
</code></pre></li>
<li><p>注意:</p>
<ul>
<li>GET 可提交的数据量受到URL长度的限制，HTTP 协议规范没有对 URL 长度进行限制。这个限制是特定的浏览器及服务器对它的限制</li>
<li>理论上讲，POST 是没有大小限制的，HTTP 协议规范也没有进行大小限制，出于安全考虑，服务器软件在实现时会做一定限制</li>
<li>参考上面的报文示例，可以发现 GET 和 POST 数据内容是一模一样的，只是位置不同，一个在URL里，一个在 HTTP 包的包体里</li>
</ul>
</li>
</ol>
<h3 id="post-提交数据的方式"><a name="post-提交数据的方式" class="plugin-anchor" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#post-提交数据的方式"><i class="fa fa-link" aria-hidden="true"></i></a>POST 提交数据的方式</h3>
<p>HTTP 协议中规定 POST 提交的数据必须在 body 部分中，但是协议中没有规定数据使用哪种编码方式或者数据格式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>
<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们：</p>
<ul>
<li><code>application/x-www-form-urlencoded</code></li>
</ul>
<p>这是最常见的 POST 数据提交方式。浏览器的原生 <code>&lt;form&gt;</code> 表单，如果不设置 enctype 属性，那么最终就会以 <code>application/x-www-form-urlencoded</code> 方式提交数据。上个小节当中的例子便是使用了这种提交方式。可以看到 body 当中的内容和 GET 请求是完全相同的。</p>
<ul>
<li><code>multipart/form-data</code></li>
</ul>
<p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 <code>&lt;form&gt;</code> 表单的 enctype 等于 <code>multipart/form-data</code>。直接来看一个请求示例：</p>
<pre><code>POST http://www.example.com HTTP/1.1
Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA

------WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name="text"

title
------WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name="file"; filename="chrome.png"
Content-Type: image/png

PNG ... content of chrome.png ...
------WebKitFormBoundaryrGKCBY7qhFd3TrwA--
</code></pre><p>这个例子稍微复杂点。首先生成了一个 boundary 用于分割不同的字段，为了避免与正文内容重复，boundary 很长很复杂。然后 <code>Content-Type</code> 里指明了数据是以 <code>multipart/form-data</code> 来编码，本次请求的 boundary 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 --boundary 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 --boundary-- 标示结束。关于 <code>multipart/form-data</code> 的详细定义，请前往 <a href="http://www.ietf.org/rfc/rfc1867.txt" target="_blank">RFC1867</a> 查看（或者相对友好一点的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition" target="_blank">MDN 文档</a>）。</p>
<p>这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。</p>
<p>上面提到的这两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生 <code>&lt;form&gt;</code> 表单也只支持这两种方式（通过 <code>&lt;form&gt;</code> 元素的 enctype 属性指定，默认为 <code>application/x-www-form-urlencoded</code>。其实 enctype 还支持 text/plain，不过用得非常少）。</p>
<p>随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，例如 <code>application/json</code>，<code>text/xml</code>，乃至 <code>application/x-protobuf</code> 这种二进制格式，只要服务器可以根据 <code>Content-Type</code> 和 <code>Content-Encoding</code> 正确地解析出请求，都是没有问题的。</p>
<h3 id="响应报文"><a name="响应报文" class="plugin-anchor" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#响应报文"><i class="fa fa-link" aria-hidden="true"></i></a>响应报文</h3>
<p>HTTP 响应与 HTTP 请求相似，HTTP响应也由3个部分构成，分别是：</p>
<ul>
<li>状态行</li>
<li>响应头(Response Header)</li>
<li>响应正文</li>
</ul>
<p>状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。</p>
<p>常见的状态码有如下几种：</p>
<ul>
<li><code>200 OK</code> 客户端请求成功</li>
<li><code>301 Moved Permanently</code> 请求永久重定向</li>
<li><code>302 Moved Temporarily</code> 请求临时重定向</li>
<li><code>304 Not Modified</code> 文件未修改，可以直接使用缓存的文件。</li>
<li><code>400 Bad Request</code> 由于客户端请求有语法错误，不能被服务器所理解。</li>
<li><code>401 Unauthorized</code> 请求未经授权。这个状态代码必须和WWW-Authenticate报头域一起使用</li>
<li><code>403 Forbidden</code> 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因</li>
<li><code>404 Not Found</code> 请求的资源不存在，例如，输入了错误的URL</li>
<li><code>500 Internal Server Error</code> 服务器发生不可预期的错误，导致无法完成客户端的请求。</li>
<li><code>503 Service Unavailable</code> 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。</li>
</ul>
<p>下面是一个HTTP响应的例子：</p>
<pre><code>HTTP/1.1 200 OK

Server:Apache Tomcat/5.0.12
Date:Mon,6Oct2003 13:23:42 GMT
Content-Length:112

&lt;html&gt;...
</code></pre><h3 id="条件-get"><a name="条件-get" class="plugin-anchor" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#条件-get"><i class="fa fa-link" aria-hidden="true"></i></a>条件 GET</h3>
<p>HTTP 条件 GET 是 HTTP 协议为了减少不必要的带宽浪费，提出的一种方案。详见 <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" target="_blank">RFC2616</a> 。</p>
<ol>
<li><p>HTTP 条件 GET 使用的时机？</p>
<p> 客户端之前已经访问过某网站，并打算再次访问该网站。</p>
</li>
<li><p>HTTP 条件 GET 使用的方法？</p>
<p> 客户端向服务器发送一个包询问是否在上一次访问网站的时间后是否更改了页面，如果服务器没有更新，显然不需要把整个网页传给客户端，客户端只要使用本地缓存即可，如果服务器对照客户端给出的时间已经更新了客户端请求的网页，则发送这个更新了的网页给用户。</p>
<p>下面是一个具体的发送接受报文示例：</p>
<p>客户端发送请求：</p>
<pre><code> GET / HTTP/1.1  
 Host: www.sina.com.cn:80  
 If-Modified-Since:Thu, 4 Feb 2010 20:39:13 GMT  
 Connection: Close  
</code></pre><p>第一次请求时，服务器端返回请求数据，之后的请求，服务器根据请求中的 <code>If-Modified-Since</code> 字段判断响应文件没有更新，如果没有更新，服务器返回一个 <code>304 Not Modified</code>响应，告诉浏览器请求的资源在浏览器上没有更新，可以使用已缓存的上次获取的文件。</p>
<pre><code> HTTP/1.0 304 Not Modified  
 Date: Thu, 04 Feb 2010 12:38:41 GMT  
 Content-Type: text/html  
 Expires: Thu, 04 Feb 2010 12:39:41 GMT  
 Last-Modified: Thu, 04 Feb 2010 12:29:04 GMT  
 Age: 28  
 X-Cache: HIT from sy32-21.sina.com.cn  
 Connection: close 
</code></pre><p>如果服务器端资源已经更新的话，就返回正常的响应。</p>
</li>
</ol>
<h2 id="持久连接"><a name="持久连接" class="plugin-anchor" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#持久连接"><i class="fa fa-link" aria-hidden="true"></i></a>持久连接</h2>
<p>我们知道 HTTP 协议采用“请求-应答”模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接（HTTP协议为无连接的协议）；当使用 Keep-Alive 模式（又称持久连接、连接重用）时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。</p>
<p>在 HTTP 1.0 版本中，并没有官方的标准来规定 Keep-Alive 如何工作，因此实际上它是被附加到 HTTP 1.0协议上，如果客户端浏览器支持 Keep-Alive ，那么就在HTTP请求头中添加一个字段 Connection: Keep-Alive，当服务器收到附带有 Connection: Keep-Alive 的请求时，它也会在响应头中添加一个同样的字段来使用 Keep-Alive 。这样一来，客户端和服务器之间的HTTP连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。</p>
<p>在 HTTP 1.1 版本中，默认情况下所有连接都被保持，如果加入 "Connection: close" 才关闭。目前大部分浏览器都使用 HTTP 1.1 协议，也就是说默认都会发起 Keep-Alive 的连接请求了，所以是否能完成一个完整的 Keep-Alive 连接就看服务器设置情况。</p>
<p>由于 HTTP 1.0 没有官方的 Keep-Alive 规范，并且也已经基本被淘汰，以下讨论均是针对 HTTP 1.1 标准中的 Keep-Alive 展开的。</p>
<p>注意：</p>
<ul>
<li><p>HTTP Keep-Alive 简单说就是保持当前的TCP连接，避免了重新建立连接。</p>
</li>
<li><p>HTTP 长连接不可能一直保持，例如 <code>Keep-Alive: timeout=5, max=100</code>，表示这个TCP通道可以保持5秒，max=100，表示这个长连接最多接收100次请求就断开。</p>
</li>
<li><p>HTTP是一个无状态协议，这意味着每个请求都是独立的，Keep-Alive没能改变这个结果。另外，Keep-Alive也不能保证客户端和服务器之间的连接一定是活跃的，在HTTP1.1版本中也如此。唯一能保证的就是当连接被关闭时你能得到一个通知，所以不应该让程序依赖于Keep-Alive的保持连接特性，否则会有意想不到的后果。</p>
</li>
<li><p>使用长连接之后，客户端、服务端怎么知道本次传输结束呢？两部分：1. 判断传输数据是否达到了Content-Length 指示的大小；2. 动态生成的文件没有 Content-Length ，它是分块传输（chunked），这时候就要根据 chunked 编码来判断，chunked 编码的数据在最后有一个空 chunked 块，表明本次传输数据结束，详见<a href="http://www.cnblogs.com/skynet/archive/2010/12/11/1903347.html" target="_blank">这里</a>。什么是 chunked 分块传输呢？下面我们就来介绍。</p>
</li>
</ul>
<h3 id="transfer-encoding"><a name="transfer-encoding" class="plugin-anchor" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#transfer-encoding"><i class="fa fa-link" aria-hidden="true"></i></a>Transfer-Encoding</h3>
<p>Transfer-Encoding 是一个用来标示 HTTP 报文传输格式的头部值。尽管这个取值理论上可以有很多，但是当前的 HTTP 规范里实际上之定义了一种传输取值——chunked。</p>
<p>如果一个HTTP消息（请求消息或应答消息）的Transfer-Encoding消息头的值为chunked，那么，消息体由数量未定的块组成，并以最后一个大小为0的块为结束。</p>
<p>每一个非空的块都以该块包含数据的字节数（字节数以十六进制表示）开始，跟随一个CRLF （回车及换行），然后是数据本身，最后块CRLF结束。在一些实现中，块大小和CRLF之间填充有白空格（0x20）。</p>
<p>最后一块是单行，由块大小（0），一些可选的填充白空格，以及CRLF。最后一块不再包含任何数据，但是可以发送可选的尾部，包括消息头字段。
消息最后以CRLF结尾。</p>
<p><strong>注意：</strong> chunked 和 multipart 两个名词在意义上有类似的地方，不过在 HTTP 协议当中这两个概念则不是一个类别的。multipart 是一种 Content-Type，标示 HTTP 报文内容的类型，而 chunked 是一种传输格式，标示报头将以何种方式进行传输。</p>
<h3 id="http-pipelining（http-管线化）"><a name="http-pipelining（http-管线化）" class="plugin-anchor" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#http-pipelining（http-管线化）"><i class="fa fa-link" aria-hidden="true"></i></a>HTTP Pipelining（HTTP 管线化）</h3>
<p>默认情况下 HTTP 协议中每个传输层连接只能承载一个 HTTP 请求和响应，浏览器会在收到上一个请求的响应之后，再发送下一个请求。在使用持久连接的情况下，某个连接上消息的传递类似于<code>请求1 -&gt; 响应1 -&gt; 请求2 -&gt; 响应2 -&gt; 请求3 -&gt; 响应3</code>。</p>
<p>HTTP Pipelining（管线化）是将多个 HTTP 请求整批提交的技术，在传送过程中不需等待服务端的回应。使用 HTTP Pipelining 技术之后，某个连接上的消息变成了类似这样<code>请求1 -&gt; 请求2 -&gt; 请求3 -&gt; 响应1 -&gt; 响应2 -&gt; 响应3</code>。</p>
<p>注意下面几点：</p>
<ul>
<li>管线化机制通过持久连接（persistent connection）完成，仅 HTTP/1.1 支持此技术（HTTP/1.0不支持）</li>
<li>只有 GET 和 HEAD 请求可以进行管线化，而 POST 则有所限制</li>
<li>初次创建连接时不应启动管线机制，因为对方（服务器）不一定支持 HTTP/1.1 版本的协议</li>
<li>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变</li>
<li>HTTP /1.1 要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可</li>
<li>由于上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如 Chrome 和 Firefox 默认并未开启管线化支持</li>
</ul>
<p>更多关于 HTTP Pipelining 的知识可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Pipelining_FAQ" target="_blank">这里</a>。</p>
<h2 id="会话跟踪"><a name="会话跟踪" class="plugin-anchor" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#会话跟踪"><i class="fa fa-link" aria-hidden="true"></i></a>会话跟踪</h2>
<ol>
<li><p>什么是会话？</p>
<p> 客户端打开与服务器的连接发出请求到服务器响应客户端请求的全过程称之为会话。</p>
</li>
<li><p>什么是会话跟踪？</p>
<p> 会话跟踪指的是对同一个用户对服务器的连续的请求和接受响应的监视。</p>
</li>
<li><p>为什么需要会话跟踪？</p>
<p> 浏览器与服务器之间的通信是通过HTTP协议进行通信的，而HTTP协议是”无状态”的协议，它不能保存客户的信息，即一次响应完成之后连接就断开了，下一次的请求需要重新连接，这样就需要判断是否是同一个用户，所以才有会话跟踪技术来实现这种要求。</p>
</li>
</ol>
<ol>
<li><p>会话跟踪常用的方法:</p>
<ol>
<li><p>URL重写</p>
<p>URL(统一资源定位符)是Web上特定页面的地址，URL重写的技术就是在URL结尾添加一个附加数据以标识该会话,把会话ID通过URL的信息传递过去，以便在服务器端进行识别不同的用户。</p>
</li>
<li><p>隐藏表单域</p>
<p>将会话ID添加到HTML表单元素中提交到服务器，此表单元素并不在客户端显示</p>
</li>
<li><p>Cookie</p>
<p> Cookie是Web服务器发送给客户端的一小段信息，客户端请求时可以读取该信息发送到服务器端，进而进行用户的识别。对于客户端的每次请求，服务器都会将Cookie发送到客户端,在客户端可以进行保存,以便下次使用。</p>
<p> 客户端可以采用两种方式来保存这个Cookie对象，一种方式是保存在客户端内存中，称为临时Cookie，浏览器关闭后这个Cookie对象将消失。另外一种方式是保存在客户机的磁盘上，称为永久Cookie。以后客户端只要访问该网站，就会将这个Cookie再次发送到服务器上，前提是这个Cookie在有效期内，这样就实现了对客户的跟踪。</p>
<p> Cookie是可以被禁止的。</p>
</li>
<li><p>Session:</p>
<p> 每一个用户都有一个不同的session，各个用户之间是不能共享的，是每个用户所独享的，在session中可以存放信息。</p>
<p> 在服务器端会创建一个session对象，产生一个sessionID来标识这个session对象，然后将这个sessionID放入到Cookie中发送到客户端，下一次访问时，sessionID会发送到服务器，在服务器端进行识别不同的用户。</p>
<p> Session的实现依赖于Cookie，如果Cookie被禁用，那么session也将失效。</p>
</li>
</ol>
</li>
</ol>
<h2 id="跨站攻击"><a name="跨站攻击" class="plugin-anchor" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#跨站攻击"><i class="fa fa-link" aria-hidden="true"></i></a>跨站攻击</h2>
<ul>
<li><p>CSRF（Cross-site request forgery，跨站请求伪造）</p>
<p>  CSRF(XSRF) 顾名思义，是伪造请求，冒充用户在站内的正常操作。</p>
<p>  例如，一论坛网站的发贴是通过 GET 请求访问，点击发贴之后 JS 把发贴内容拼接成目标 URL 并访问：</p>
<pre><code>  http://example.com/bbs/create_post.php?title=标题&amp;content=内容
</code></pre><p>  那么，我们只需要在论坛中发一帖，包含一链接：</p>
<pre><code>  http://example.com/bbs/create_post.php?title=我是脑残&amp;content=哈哈
</code></pre><p>  只要有用户点击了这个链接，那么他们的帐户就会在不知情的情况下发布了这一帖子。可能这只是个恶作剧，但是既然发贴的请求可以伪造，那么删帖、转帐、改密码、发邮件全都可以伪造。</p>
<p>  <strong>如何防范 CSRF 攻击</strong>？可以注意以下几点：</p>
<ul>
<li><p>关键操作只接受POST请求</p>
</li>
<li><p>验证码</p>
<p>CSRF攻击的过程，往往是在用户不知情的情况下构造网络请求。所以如果使用验证码，那么每次操作都需要用户进行互动，从而简单有效的防御了CSRF攻击。</p>
<p>但是如果你在一个网站作出任何举动都要输入验证码会严重影响用户体验，所以验证码一般只出现在特殊操作里面，或者在注册时候使用。</p>
</li>
<li><p>检测 Referer</p>
<p>常见的互联网页面与页面之间是存在联系的，比如你在<code>www.baidu.com</code>应该是找不到通往<code>www.google.com</code>的链接的，再比如你在论坛留言，那么不管你留言后重定向到哪里去了，之前的那个网址一定会包含留言的输入框，这个之前的网址就会保留在新页面头文件的 <code>Referer</code> 中</p>
<p>通过检查<code>Referer</code>的值，我们就可以判断这个请求是合法的还是非法的，但是问题出在服务器不是任何时候都能接受到<code>Referer</code>的值，所以 Referer Check 一般用于监控 CSRF 攻击的发生，而不用来抵御攻击。</p>
</li>
<li><p>Token</p>
<p>目前主流的做法是使用 Token 抵御 CSRF 攻击。下面通过分析 CSRF 攻击来理解为什么 Token 能够有效</p>
<p>CSRF攻击要成功的条件在于攻击者能够预测所有的参数从而构造出合法的请求。所以根据不可预测性原则，我们可以对参数进行加密从而防止CSRF攻击。</p>
<p>另一个更通用的做法是保持原有参数不变，另外添加一个参数Token，其值是随机的。这样攻击者因为不知道Token而无法构造出合法的请求进行攻击。</p>
<p>Token 使用原则</p>
<ul>
<li>Token 要足够随机————只有这样才算不可预测</li>
<li>Token 是一次性的，即每次请求成功后要更新Token————这样可以增加攻击难度，增加预测难度</li>
<li>Token 要注意保密性————敏感操作使用 post，防止 Token 出现在 URL 中</li>
</ul>
<p><strong>注意</strong>：过滤用户输入的内容<strong>不能</strong>阻挡 csrf，我们需要做的是过滤请求的<strong>来源</strong>。</p>
</li>
</ul>
</li>
<li><p>XSS（Cross Site Scripting，跨站脚本攻击）</p>
<p>  XSS 全称“跨站脚本”，是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p>
<p>  运行预期之外的脚本带来的后果有很多中，可能只是简单的恶作剧——一个关不掉的窗口：</p>
<pre><code>  while (true) {
      alert("你关不掉我~");
  }
</code></pre><p>  也可以是盗号或者其他未授权的操作。</p>
<p>  XSS 是实现 CSRF 的诸多途径中的一条，但绝对不是唯一的一条。一般习惯上把通过 XSS 来实现的 CSRF 称为 XSRF。</p>
<p>  <strong>如何防御 XSS 攻击？</strong></p>
<p>  理论上，所有可输入的地方没有对输入数据进行处理的话，都会存在XSS漏洞，漏洞的危害取决于攻击代码的威力，攻击代码也不局限于script。防御 XSS 攻击最简单直接的方法，就是过滤用户的输入。</p>
<p>  如果不需要用户输入 HTML，可以直接对用户的输入进行 HTML escape 。下面一小段脚本：</p>
<pre><code>  &lt;script&gt;window.location.href=”http://www.baidu.com”;&lt;/script&gt;
</code></pre><p>  经过 escape 之后就成了：</p>
<pre><code>  &amp;lt;script&amp;gt;window.location.href=&amp;quot;http://www.baidu.com&amp;quot;&amp;lt;/script&amp;gt;
</code></pre><p>  它现在会像普通文本一样显示出来，变得无毒无害，不能执行了。</p>
<p>  当我们需要用户输入 HTML 的时候，需要对用户输入的内容做更加小心细致的处理。仅仅粗暴地去掉 script 标签是没有用的，任何一个合法 HTML 标签都可以添加 onclick 一类的事件属性来执行 JavaScript。更好的方法可能是，将用户的输入使用 HTML 解析库进行解析，获取其中的数据。然后根据用户原有的标签属性，重新构建 HTML 元素树。构建的过程中，所有的标签、属性都只从<strong>白名单</strong>中拿取。</p>
</li>
</ul>
<h3 id="参考资料"><a name="参考资料" class="plugin-anchor" href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html#参考资料"><i class="fa fa-link" aria-hidden="true"></i></a>参考资料</h3>
<ul>
<li><a href="http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank">浅谈HTTP中Get与Post的区别</a></li>
<li><a href="http://www.cnblogs.com/loveyakamoz/archive/2011/07/22/2113614.html" target="_blank">http请求与http响应详细解析</a></li>
<li><a href="http://blog.csdn.net/luoleicn/article/details/5289496" target="_blank">HTTP 条件 Get (Conditional Get)</a></li>
<li><a href="http://www.cnblogs.com/cswuyg/p/3653263.html" target="_blank">HTTP中的长连接与短连接</a></li>
<li><a href="http://www.cnblogs.com/skynet/archive/2010/12/11/1903347.html" target="_blank">HTTP Keep-Alive模式</a></li>
<li><a href="https://zh.wikipedia.org/zh-cn/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81" target="_blank">分块传输编码</a></li>
<li><a href="http://blog.csdn.net/dongzhiquan/article/details/6114040" target="_blank">HTTP 管线化(HTTP pipelining)</a></li>
<li><a href="http://www.cnblogs.com/skynet/archive/2010/05/18/1738301.html" target="_blank">HTTP协议及其POST与GET操作差异 &amp; C#中如何使用POST、GET等</a></li>
<li><a href="https://www.cnblogs.com/softidea/p/5745369.html" target="_blank">四种常见的 POST 提交数据方式</a></li>
<li><a href="http://blog.163.com/chfyljt@126/blog/static/11758032520127302714624/" target="_blank">会话跟踪</a></li>
<li><a href="https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/" target="_blank">总结 XSS 与 CSRF 两种跨站攻击</a></li>
<li><a href="http://drops.wooyun.org/papers/155" target="_blank">CSRF简单介绍与利用方法</a></li>
<li><a href="http://blog.csdn.net/ghsau/article/details/17027893" target="_blank">XSS攻击及防御</a></li>
<li><a href="http://baike.baidu.com/view/9472.htm" target="_blank">百度百科：HTTP</a></li>
</ul>

                                
                                </section>
                            
    </div>
    <div class="search-results">
        <div class="has-results">
            
            <h1 class="search-results-title"><span class="search-results-count"></span> results matching "<span class="search-query"></span>"</h1>
            <ul class="search-results-list"></ul>
            
        </div>
        <div class="no-results">
            
            <h1 class="search-results-title">No results matching "<span class="search-query"></span>"</h1>
            
        </div>
    </div>
</div>

                        </div>
                    </div>
                
            </div>

            
                
                <a href="https://hit-alibaba.github.io/interview/basic/network/" class="navigation navigation-prev " aria-label="Previous page: 计算机网络">
                    <i class="fa fa-angle-left"></i>
                </a>
                
                
                <a href="https://hit-alibaba.github.io/interview/basic/network/TCP.html" class="navigation navigation-next " aria-label="Next page: TCP 协议" style="margin-right: 0px;">
                    <i class="fa fa-angle-right"></i>
                </a>
                
            
        
    </div>

    <script>
        var gitbook = gitbook || [];
        gitbook.push(function() {
            gitbook.page.hasChanged({"page":{"title":"HTTP 协议","level":"1.2.1.1","depth":3,"next":{"title":"TCP 协议","level":"1.2.1.2","depth":3,"path":"basic/network/TCP.md","ref":"basic/network/TCP.md","articles":[]},"previous":{"title":"计算机网络","level":"1.2.1","depth":2,"path":"basic/network/README.md","ref":"basic/network/README.md","articles":[{"title":"HTTP 协议","level":"1.2.1.1","depth":3,"path":"basic/network/HTTP.md","ref":"basic/network/HTTP.md","articles":[]},{"title":"TCP 协议","level":"1.2.1.2","depth":3,"path":"basic/network/TCP.md","ref":"basic/network/TCP.md","articles":[]},{"title":"UDP 协议","level":"1.2.1.3","depth":3,"path":"basic/network/UDP.md","ref":"basic/network/UDP.md","articles":[]},{"title":"IP 协议","level":"1.2.1.4","depth":3,"path":"basic/network/IP.md","ref":"basic/network/IP.md","articles":[]},{"title":"Socket 编程","level":"1.2.1.5","depth":3,"path":"basic/network/Socket-Programming-Basic.md","ref":"basic/network/Socket-Programming-Basic.md","articles":[]}]},"dir":"ltr"},"config":{"plugins":["anchors"],"styles":{"website":"styles/website.css","pdf":"styles/pdf.css","epub":"styles/epub.css","mobi":"styles/mobi.css","ebook":"styles/ebook.css","print":"styles/print.css"},"pluginsConfig":{"anchors":{},"highlight":{},"search":{},"lunr":{"maxIndexSize":1000000,"ignoreSpecialCharacters":false},"sharing":{"facebook":true,"twitter":true,"google":false,"weibo":false,"instapaper":false,"vk":false,"all":["facebook","google","twitter","weibo","instapaper"]},"fontsettings":{"theme":"white","family":"sans","size":2},"theme-default":{"styles":{"website":"styles/website.css","pdf":"styles/pdf.css","epub":"styles/epub.css","mobi":"styles/mobi.css","ebook":"styles/ebook.css","print":"styles/print.css"},"showLevel":false}},"theme":"default","pdf":{"pageNumbers":true,"fontSize":12,"fontFamily":"Arial","paperSize":"a4","chapterMark":"pagebreak","pageBreaksBefore":"/","margin":{"right":62,"left":62,"top":56,"bottom":56}},"structure":{"langs":"LANGS.md","readme":"README.md","glossary":"GLOSSARY.md","summary":"SUMMARY.md"},"variables":{},"title":"笔试面试知识整理","gitbook":"*","description":"一些 IT 笔试面试有关知识的整理，包括基础知识，安卓，iOS 开发等，希望对大家有所帮助"},"file":{"path":"basic/network/HTTP.md","mtime":"2017-05-07T12:13:01.000Z","type":"markdown"},"gitbook":{"version":"3.2.2","time":"2017-07-16T04:50:11.921Z"},"basePath":"../..","book":{"language":""}});
        });
    </script>
</div>

        
    <script src="./HTTP 协议 · 笔试面试知识整理_files/gitbook.js"></script>
    <script src="./HTTP 协议 · 笔试面试知识整理_files/theme.js"></script>
    
        
        <script src="./HTTP 协议 · 笔试面试知识整理_files/search-engine.js"></script>
        
    
        
        <script src="./HTTP 协议 · 笔试面试知识整理_files/search.js"></script>
        
    
        
        <script src="./HTTP 协议 · 笔试面试知识整理_files/lunr.min.js"></script>
        
    
        
        <script src="./HTTP 协议 · 笔试面试知识整理_files/search-lunr.js"></script>
        
    
        
        <script src="./HTTP 协议 · 笔试面试知识整理_files/buttons.js"></script>
        
    
        
        <script src="./HTTP 协议 · 笔试面试知识整理_files/fontsettings.js"></script>
        
    

    


</body></html>